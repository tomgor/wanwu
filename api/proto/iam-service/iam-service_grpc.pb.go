// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package iam_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IAMServiceClient is the client API for IAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IAMServiceClient interface {
	// 获取用户列表（用于下拉选择，不在组织中的用户）
	GetUserSelectNotInOrg(ctx context.Context, in *GetUserSelectNotInOrgReq, opts ...grpc.CallOption) (*Select, error)
	// 获取用户列表 by userIDs
	GetUserSelectByUserIDs(ctx context.Context, in *GetUserSelectByUserIDsReq, opts ...grpc.CallOption) (*Select, error)
	// 获取用户列表
	GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error)
	// 获取用户
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*IDName, error)
	// 编辑用户
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改用户状态
	ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新用户密码
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 重置用户密码
	ResetUserPassword(ctx context.Context, in *ResetUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户权限
	GetUserPermission(ctx context.Context, in *GetUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error)
	// 修改用户语言
	ChangeUserLanguage(ctx context.Context, in *ChangeUserLanguageReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 上传用户头像
	UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取组织列表（用于下拉选择）
	GetOrgSelect(ctx context.Context, in *GetOrgSelectReq, opts ...grpc.CallOption) (*Select, error)
	// 获取组织列表
	GetOrgList(ctx context.Context, in *GetOrgListReq, opts ...grpc.CallOption) (*GetOrgListResp, error)
	// 获取组织
	GetOrgInfo(ctx context.Context, in *GetOrgInfoReq, opts ...grpc.CallOption) (*OrgInfo, error)
	// 创建组织
	CreateOrg(ctx context.Context, in *CreateOrgReq, opts ...grpc.CallOption) (*IDName, error)
	// 编辑组织
	UpdateOrg(ctx context.Context, in *UpdateOrgReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除组织
	DeleteOrg(ctx context.Context, in *DeleteOrgReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改组织状态
	ChangeOrgStatus(ctx context.Context, in *ChangeOrgStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 增加组织用户
	AddOrgUser(ctx context.Context, in *AddOrgUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 移除组织用户
	RemoveOrgUser(ctx context.Context, in *RemoveOrgUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取角色列表（用于下拉选择）
	GetRoleSelect(ctx context.Context, in *GetRoleSelectReq, opts ...grpc.CallOption) (*GetRoleSelectResp, error)
	// 获取角色列表
	GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListResp, error)
	// 获取角色
	GetRoleInfo(ctx context.Context, in *GetRoleInfoReq, opts ...grpc.CallOption) (*RoleInfo, error)
	// 创建角色
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*RoleIDName, error)
	// 编辑角色
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除角色
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 修改角色状态
	ChangeRoleStatus(ctx context.Context, in *ChangeRoleStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取验证码
	GetCaptcha(ctx context.Context, in *GetCaptchaReq, opts ...grpc.CallOption) (*GetCaptchaResp, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// --- register ---
	// 邮箱注册用户
	RegisterByEmail(ctx context.Context, in *RegisterByEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 邮箱注册发送邮件
	RegisterSendEmailCode(ctx context.Context, in *RegisterSendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- reset password ---
	// 邮箱注册用户
	ResetPasswordSendEmailCode(ctx context.Context, in *ResetPasswordSendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 邮箱注册发送邮件
	ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 根据用户名检查是否存在组织中的用户，返回用户ID
	GetUserIDByOrgAndName(ctx context.Context, in *GetUserIDByOrgAndNameReq, opts ...grpc.CallOption) (*GetUserIDByOrgAndNameResp, error)
}

type iAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIAMServiceClient(cc grpc.ClientConnInterface) IAMServiceClient {
	return &iAMServiceClient{cc}
}

func (c *iAMServiceClient) GetUserSelectNotInOrg(ctx context.Context, in *GetUserSelectNotInOrgReq, opts ...grpc.CallOption) (*Select, error) {
	out := new(Select)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserSelectNotInOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUserSelectByUserIDs(ctx context.Context, in *GetUserSelectByUserIDsReq, opts ...grpc.CallOption) (*Select, error) {
	out := new(Select)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserSelectByUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*GetUserListResp, error) {
	out := new(GetUserListResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*IDName, error) {
	out := new(IDName)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ChangeUserStatus(ctx context.Context, in *ChangeUserStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ChangeUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ResetUserPassword(ctx context.Context, in *ResetUserPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ResetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUserPermission(ctx context.Context, in *GetUserPermissionReq, opts ...grpc.CallOption) (*UserPermission, error) {
	out := new(UserPermission)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ChangeUserLanguage(ctx context.Context, in *ChangeUserLanguageReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ChangeUserLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateUserAvatar(ctx context.Context, in *UpdateUserAvatarReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/UpdateUserAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetOrgSelect(ctx context.Context, in *GetOrgSelectReq, opts ...grpc.CallOption) (*Select, error) {
	out := new(Select)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetOrgSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetOrgList(ctx context.Context, in *GetOrgListReq, opts ...grpc.CallOption) (*GetOrgListResp, error) {
	out := new(GetOrgListResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetOrgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetOrgInfo(ctx context.Context, in *GetOrgInfoReq, opts ...grpc.CallOption) (*OrgInfo, error) {
	out := new(OrgInfo)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetOrgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateOrg(ctx context.Context, in *CreateOrgReq, opts ...grpc.CallOption) (*IDName, error) {
	out := new(IDName)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/CreateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateOrg(ctx context.Context, in *UpdateOrgReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/UpdateOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteOrg(ctx context.Context, in *DeleteOrgReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/DeleteOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ChangeOrgStatus(ctx context.Context, in *ChangeOrgStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ChangeOrgStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) AddOrgUser(ctx context.Context, in *AddOrgUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/AddOrgUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) RemoveOrgUser(ctx context.Context, in *RemoveOrgUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/RemoveOrgUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetRoleSelect(ctx context.Context, in *GetRoleSelectReq, opts ...grpc.CallOption) (*GetRoleSelectResp, error) {
	out := new(GetRoleSelectResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetRoleSelect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetRoleList(ctx context.Context, in *GetRoleListReq, opts ...grpc.CallOption) (*GetRoleListResp, error) {
	out := new(GetRoleListResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetRoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetRoleInfo(ctx context.Context, in *GetRoleInfoReq, opts ...grpc.CallOption) (*RoleInfo, error) {
	out := new(RoleInfo)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetRoleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*RoleIDName, error) {
	out := new(RoleIDName)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ChangeRoleStatus(ctx context.Context, in *ChangeRoleStatusReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ChangeRoleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetCaptcha(ctx context.Context, in *GetCaptchaReq, opts ...grpc.CallOption) (*GetCaptchaResp, error) {
	out := new(GetCaptchaResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetCaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) RegisterByEmail(ctx context.Context, in *RegisterByEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/RegisterByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) RegisterSendEmailCode(ctx context.Context, in *RegisterSendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/RegisterSendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ResetPasswordSendEmailCode(ctx context.Context, in *ResetPasswordSendEmailCodeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ResetPasswordSendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) ResetPasswordByEmail(ctx context.Context, in *ResetPasswordByEmailReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/ResetPasswordByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iAMServiceClient) GetUserIDByOrgAndName(ctx context.Context, in *GetUserIDByOrgAndNameReq, opts ...grpc.CallOption) (*GetUserIDByOrgAndNameResp, error) {
	out := new(GetUserIDByOrgAndNameResp)
	err := c.cc.Invoke(ctx, "/iam_service.IAMService/GetUserIDByOrgAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IAMServiceServer is the server API for IAMService service.
// All implementations must embed UnimplementedIAMServiceServer
// for forward compatibility
type IAMServiceServer interface {
	// 获取用户列表（用于下拉选择，不在组织中的用户）
	GetUserSelectNotInOrg(context.Context, *GetUserSelectNotInOrgReq) (*Select, error)
	// 获取用户列表 by userIDs
	GetUserSelectByUserIDs(context.Context, *GetUserSelectByUserIDsReq) (*Select, error)
	// 获取用户列表
	GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error)
	// 获取用户
	GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error)
	// 创建用户
	CreateUser(context.Context, *CreateUserReq) (*IDName, error)
	// 编辑用户
	UpdateUser(context.Context, *UpdateUserReq) (*emptypb.Empty, error)
	// 删除用户
	DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error)
	// 修改用户状态
	ChangeUserStatus(context.Context, *ChangeUserStatusReq) (*emptypb.Empty, error)
	// 更新用户密码
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*emptypb.Empty, error)
	// 重置用户密码
	ResetUserPassword(context.Context, *ResetUserPasswordReq) (*emptypb.Empty, error)
	// 获取用户权限
	GetUserPermission(context.Context, *GetUserPermissionReq) (*UserPermission, error)
	// 修改用户语言
	ChangeUserLanguage(context.Context, *ChangeUserLanguageReq) (*emptypb.Empty, error)
	// 上传用户头像
	UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*emptypb.Empty, error)
	// 获取组织列表（用于下拉选择）
	GetOrgSelect(context.Context, *GetOrgSelectReq) (*Select, error)
	// 获取组织列表
	GetOrgList(context.Context, *GetOrgListReq) (*GetOrgListResp, error)
	// 获取组织
	GetOrgInfo(context.Context, *GetOrgInfoReq) (*OrgInfo, error)
	// 创建组织
	CreateOrg(context.Context, *CreateOrgReq) (*IDName, error)
	// 编辑组织
	UpdateOrg(context.Context, *UpdateOrgReq) (*emptypb.Empty, error)
	// 删除组织
	DeleteOrg(context.Context, *DeleteOrgReq) (*emptypb.Empty, error)
	// 修改组织状态
	ChangeOrgStatus(context.Context, *ChangeOrgStatusReq) (*emptypb.Empty, error)
	// 增加组织用户
	AddOrgUser(context.Context, *AddOrgUserReq) (*emptypb.Empty, error)
	// 移除组织用户
	RemoveOrgUser(context.Context, *RemoveOrgUserReq) (*emptypb.Empty, error)
	// 获取角色列表（用于下拉选择）
	GetRoleSelect(context.Context, *GetRoleSelectReq) (*GetRoleSelectResp, error)
	// 获取角色列表
	GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListResp, error)
	// 获取角色
	GetRoleInfo(context.Context, *GetRoleInfoReq) (*RoleInfo, error)
	// 创建角色
	CreateRole(context.Context, *CreateRoleReq) (*RoleIDName, error)
	// 编辑角色
	UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error)
	// 删除角色
	DeleteRole(context.Context, *DeleteRoleReq) (*emptypb.Empty, error)
	// 修改角色状态
	ChangeRoleStatus(context.Context, *ChangeRoleStatusReq) (*emptypb.Empty, error)
	// 获取验证码
	GetCaptcha(context.Context, *GetCaptchaReq) (*GetCaptchaResp, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// --- register ---
	// 邮箱注册用户
	RegisterByEmail(context.Context, *RegisterByEmailReq) (*emptypb.Empty, error)
	// 邮箱注册发送邮件
	RegisterSendEmailCode(context.Context, *RegisterSendEmailCodeReq) (*emptypb.Empty, error)
	// --- reset password ---
	// 邮箱注册用户
	ResetPasswordSendEmailCode(context.Context, *ResetPasswordSendEmailCodeReq) (*emptypb.Empty, error)
	// 邮箱注册发送邮件
	ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*emptypb.Empty, error)
	// 根据用户名检查是否存在组织中的用户，返回用户ID
	GetUserIDByOrgAndName(context.Context, *GetUserIDByOrgAndNameReq) (*GetUserIDByOrgAndNameResp, error)
	mustEmbedUnimplementedIAMServiceServer()
}

// UnimplementedIAMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIAMServiceServer struct {
}

func (UnimplementedIAMServiceServer) GetUserSelectNotInOrg(context.Context, *GetUserSelectNotInOrgReq) (*Select, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSelectNotInOrg not implemented")
}
func (UnimplementedIAMServiceServer) GetUserSelectByUserIDs(context.Context, *GetUserSelectByUserIDsReq) (*Select, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSelectByUserIDs not implemented")
}
func (UnimplementedIAMServiceServer) GetUserList(context.Context, *GetUserListReq) (*GetUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (UnimplementedIAMServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedIAMServiceServer) CreateUser(context.Context, *CreateUserReq) (*IDName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedIAMServiceServer) UpdateUser(context.Context, *UpdateUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedIAMServiceServer) DeleteUser(context.Context, *DeleteUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedIAMServiceServer) ChangeUserStatus(context.Context, *ChangeUserStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserStatus not implemented")
}
func (UnimplementedIAMServiceServer) UpdateUserPassword(context.Context, *UpdateUserPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedIAMServiceServer) ResetUserPassword(context.Context, *ResetUserPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (UnimplementedIAMServiceServer) GetUserPermission(context.Context, *GetUserPermissionReq) (*UserPermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermission not implemented")
}
func (UnimplementedIAMServiceServer) ChangeUserLanguage(context.Context, *ChangeUserLanguageReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserLanguage not implemented")
}
func (UnimplementedIAMServiceServer) UpdateUserAvatar(context.Context, *UpdateUserAvatarReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAvatar not implemented")
}
func (UnimplementedIAMServiceServer) GetOrgSelect(context.Context, *GetOrgSelectReq) (*Select, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgSelect not implemented")
}
func (UnimplementedIAMServiceServer) GetOrgList(context.Context, *GetOrgListReq) (*GetOrgListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgList not implemented")
}
func (UnimplementedIAMServiceServer) GetOrgInfo(context.Context, *GetOrgInfoReq) (*OrgInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgInfo not implemented")
}
func (UnimplementedIAMServiceServer) CreateOrg(context.Context, *CreateOrgReq) (*IDName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrg not implemented")
}
func (UnimplementedIAMServiceServer) UpdateOrg(context.Context, *UpdateOrgReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrg not implemented")
}
func (UnimplementedIAMServiceServer) DeleteOrg(context.Context, *DeleteOrgReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrg not implemented")
}
func (UnimplementedIAMServiceServer) ChangeOrgStatus(context.Context, *ChangeOrgStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeOrgStatus not implemented")
}
func (UnimplementedIAMServiceServer) AddOrgUser(context.Context, *AddOrgUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrgUser not implemented")
}
func (UnimplementedIAMServiceServer) RemoveOrgUser(context.Context, *RemoveOrgUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveOrgUser not implemented")
}
func (UnimplementedIAMServiceServer) GetRoleSelect(context.Context, *GetRoleSelectReq) (*GetRoleSelectResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleSelect not implemented")
}
func (UnimplementedIAMServiceServer) GetRoleList(context.Context, *GetRoleListReq) (*GetRoleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleList not implemented")
}
func (UnimplementedIAMServiceServer) GetRoleInfo(context.Context, *GetRoleInfoReq) (*RoleInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleInfo not implemented")
}
func (UnimplementedIAMServiceServer) CreateRole(context.Context, *CreateRoleReq) (*RoleIDName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedIAMServiceServer) UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedIAMServiceServer) DeleteRole(context.Context, *DeleteRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedIAMServiceServer) ChangeRoleStatus(context.Context, *ChangeRoleStatusReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeRoleStatus not implemented")
}
func (UnimplementedIAMServiceServer) GetCaptcha(context.Context, *GetCaptchaReq) (*GetCaptchaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaptcha not implemented")
}
func (UnimplementedIAMServiceServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIAMServiceServer) RegisterByEmail(context.Context, *RegisterByEmailReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterByEmail not implemented")
}
func (UnimplementedIAMServiceServer) RegisterSendEmailCode(context.Context, *RegisterSendEmailCodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSendEmailCode not implemented")
}
func (UnimplementedIAMServiceServer) ResetPasswordSendEmailCode(context.Context, *ResetPasswordSendEmailCodeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordSendEmailCode not implemented")
}
func (UnimplementedIAMServiceServer) ResetPasswordByEmail(context.Context, *ResetPasswordByEmailReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByEmail not implemented")
}
func (UnimplementedIAMServiceServer) GetUserIDByOrgAndName(context.Context, *GetUserIDByOrgAndNameReq) (*GetUserIDByOrgAndNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIDByOrgAndName not implemented")
}
func (UnimplementedIAMServiceServer) mustEmbedUnimplementedIAMServiceServer() {}

// UnsafeIAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IAMServiceServer will
// result in compilation errors.
type UnsafeIAMServiceServer interface {
	mustEmbedUnimplementedIAMServiceServer()
}

func RegisterIAMServiceServer(s grpc.ServiceRegistrar, srv IAMServiceServer) {
	s.RegisterService(&IAMService_ServiceDesc, srv)
}

func _IAMService_GetUserSelectNotInOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSelectNotInOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserSelectNotInOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserSelectNotInOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserSelectNotInOrg(ctx, req.(*GetUserSelectNotInOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUserSelectByUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSelectByUserIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserSelectByUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserSelectByUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserSelectByUserIDs(ctx, req.(*GetUserSelectByUserIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserList(ctx, req.(*GetUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ChangeUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ChangeUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ChangeUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ChangeUserStatus(ctx, req.(*ChangeUserStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateUserPassword(ctx, req.(*UpdateUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ResetUserPassword(ctx, req.(*ResetUserPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserPermission(ctx, req.(*GetUserPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ChangeUserLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserLanguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ChangeUserLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ChangeUserLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ChangeUserLanguage(ctx, req.(*ChangeUserLanguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/UpdateUserAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateUserAvatar(ctx, req.(*UpdateUserAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetOrgSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetOrgSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetOrgSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetOrgSelect(ctx, req.(*GetOrgSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetOrgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetOrgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetOrgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetOrgList(ctx, req.(*GetOrgListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetOrgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetOrgInfo(ctx, req.(*GetOrgInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/CreateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateOrg(ctx, req.(*CreateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/UpdateOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateOrg(ctx, req.(*UpdateOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/DeleteOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteOrg(ctx, req.(*DeleteOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ChangeOrgStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeOrgStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ChangeOrgStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ChangeOrgStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ChangeOrgStatus(ctx, req.(*ChangeOrgStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_AddOrgUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).AddOrgUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/AddOrgUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).AddOrgUser(ctx, req.(*AddOrgUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_RemoveOrgUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveOrgUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).RemoveOrgUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/RemoveOrgUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).RemoveOrgUser(ctx, req.(*RemoveOrgUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetRoleSelect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleSelectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetRoleSelect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetRoleSelect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetRoleSelect(ctx, req.(*GetRoleSelectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetRoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetRoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetRoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetRoleList(ctx, req.(*GetRoleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetRoleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetRoleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetRoleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetRoleInfo(ctx, req.(*GetRoleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ChangeRoleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeRoleStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ChangeRoleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ChangeRoleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ChangeRoleStatus(ctx, req.(*ChangeRoleStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetCaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetCaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetCaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetCaptcha(ctx, req.(*GetCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_RegisterByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).RegisterByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/RegisterByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).RegisterByEmail(ctx, req.(*RegisterByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_RegisterSendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).RegisterSendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/RegisterSendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).RegisterSendEmailCode(ctx, req.(*RegisterSendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ResetPasswordSendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordSendEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ResetPasswordSendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ResetPasswordSendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ResetPasswordSendEmailCode(ctx, req.(*ResetPasswordSendEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_ResetPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordByEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).ResetPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/ResetPasswordByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).ResetPasswordByEmail(ctx, req.(*ResetPasswordByEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IAMService_GetUserIDByOrgAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIDByOrgAndNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IAMServiceServer).GetUserIDByOrgAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam_service.IAMService/GetUserIDByOrgAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IAMServiceServer).GetUserIDByOrgAndName(ctx, req.(*GetUserIDByOrgAndNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IAMService_ServiceDesc is the grpc.ServiceDesc for IAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "iam_service.IAMService",
	HandlerType: (*IAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserSelectNotInOrg",
			Handler:    _IAMService_GetUserSelectNotInOrg_Handler,
		},
		{
			MethodName: "GetUserSelectByUserIDs",
			Handler:    _IAMService_GetUserSelectByUserIDs_Handler,
		},
		{
			MethodName: "GetUserList",
			Handler:    _IAMService_GetUserList_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _IAMService_GetUserInfo_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _IAMService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _IAMService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _IAMService_DeleteUser_Handler,
		},
		{
			MethodName: "ChangeUserStatus",
			Handler:    _IAMService_ChangeUserStatus_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _IAMService_UpdateUserPassword_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _IAMService_ResetUserPassword_Handler,
		},
		{
			MethodName: "GetUserPermission",
			Handler:    _IAMService_GetUserPermission_Handler,
		},
		{
			MethodName: "ChangeUserLanguage",
			Handler:    _IAMService_ChangeUserLanguage_Handler,
		},
		{
			MethodName: "UpdateUserAvatar",
			Handler:    _IAMService_UpdateUserAvatar_Handler,
		},
		{
			MethodName: "GetOrgSelect",
			Handler:    _IAMService_GetOrgSelect_Handler,
		},
		{
			MethodName: "GetOrgList",
			Handler:    _IAMService_GetOrgList_Handler,
		},
		{
			MethodName: "GetOrgInfo",
			Handler:    _IAMService_GetOrgInfo_Handler,
		},
		{
			MethodName: "CreateOrg",
			Handler:    _IAMService_CreateOrg_Handler,
		},
		{
			MethodName: "UpdateOrg",
			Handler:    _IAMService_UpdateOrg_Handler,
		},
		{
			MethodName: "DeleteOrg",
			Handler:    _IAMService_DeleteOrg_Handler,
		},
		{
			MethodName: "ChangeOrgStatus",
			Handler:    _IAMService_ChangeOrgStatus_Handler,
		},
		{
			MethodName: "AddOrgUser",
			Handler:    _IAMService_AddOrgUser_Handler,
		},
		{
			MethodName: "RemoveOrgUser",
			Handler:    _IAMService_RemoveOrgUser_Handler,
		},
		{
			MethodName: "GetRoleSelect",
			Handler:    _IAMService_GetRoleSelect_Handler,
		},
		{
			MethodName: "GetRoleList",
			Handler:    _IAMService_GetRoleList_Handler,
		},
		{
			MethodName: "GetRoleInfo",
			Handler:    _IAMService_GetRoleInfo_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _IAMService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _IAMService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _IAMService_DeleteRole_Handler,
		},
		{
			MethodName: "ChangeRoleStatus",
			Handler:    _IAMService_ChangeRoleStatus_Handler,
		},
		{
			MethodName: "GetCaptcha",
			Handler:    _IAMService_GetCaptcha_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _IAMService_Login_Handler,
		},
		{
			MethodName: "RegisterByEmail",
			Handler:    _IAMService_RegisterByEmail_Handler,
		},
		{
			MethodName: "RegisterSendEmailCode",
			Handler:    _IAMService_RegisterSendEmailCode_Handler,
		},
		{
			MethodName: "ResetPasswordSendEmailCode",
			Handler:    _IAMService_ResetPasswordSendEmailCode_Handler,
		},
		{
			MethodName: "ResetPasswordByEmail",
			Handler:    _IAMService_ResetPasswordByEmail_Handler,
		},
		{
			MethodName: "GetUserIDByOrgAndName",
			Handler:    _IAMService_GetUserIDByOrgAndName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/iam-service/iam-service.proto",
}
