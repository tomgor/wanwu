package service

import (
	"testing"
	// ... 导入其他依赖，如 request, response model
)

// 编写一个测试函数来运行和调试您的逻辑
func Test_parseRsaPrivateKey(t *testing.T) {
	// ⚠️ 注意：在实际测试环境中，您需要初始化所有的依赖（如 c *Client, iam 客户端等）

	base64Key := "MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDNRJniwIOFYFtl2cHqDJIs1s2/pBwMREtR2ijVxyExbsY10eFyFvNw5HUX8jP+Tya6laBPgKfQUKgVBE03yp9s3Wv7K3ow+zSZLA7WFftavBE15xiYbkrRXeJG7KXumQt54TKrxrPo6P0L3hCRrTSW4gyoo0nP1qTdkqOPMgkmPN4r5X7ZSg+ZU/jHDG80MSMVwgnPhjE6O3yAWk4NWk4hXmT1uaXMkA82gRb5x5AQHAb+R9t/wyzKrc/3pZnwdI7+fzzVLa3KC0I87otA/9vZ5AhbOuFcT6Vy8Ac3PENPCGBqnvoty+s9t3+GjfC2ioYiGnw4j0ST3BatyZ/JMjDPAgMBAAECggEATFd1PCYJRDOgCnNAcYGXY+HHx7yLSeykbp7KjSdwKuheA2o5hKsQgy4UdoF34N8jMkWvx6G7x/gXaymcZmGPhXecT1/OJCVpXIZMRkcKoqZLaFa4iQiL/u4B2Arvc5ur7vpYVBaklr0AT8eZNfTLGEqeFqIUM55K1rVQ61LaoENb15bb2rC7X/QH3Yecs87JBagxxuvQRIb4qTCHO0MICq+1QcqkAFQrteX+NUVZGQbsmEe7/Kaq8bXTC8h211hjxEx2y0xR0qxXtvSbLUy86Y2HVCNfKtiLmAf5FsSICVNew7VvLxqrXlq/14mP91cUhIW5tgTSibtab+dZNeRUYQKBgQD6b4fp9Frm1IrIbtT+nuZUuaQp8VBvJDW9In33KNRaBdYuCqLRVK3nenQvYGH8OjJyJqwn5ZMDmgO2jQUvZH7PWsQtiDKxj/u6egUhZTfWg+xNMg0m5XNuq1PxjbvilGPhaBUtxYses1vDdVpDE2k6BGMDnE5nBDYqeZZTX/TmJwKBgQDR1ChxOxg5q9unryp0pLdLFricTRAaWYBuWEgYgdA3j40BJfL0MrraQ4VqOOEBOxkZ1ulboAq7g4vHmjB3/hf0psYudICCMUynVztQgVn33i/Zj12LmP96edme0s2hIotfPM6KrIDMnR2OCkFQ/cfrF/VfkuvOblVya0Jj3JvxGQKBgQDdIVYVkpohcFMLIDIakhw3e6QlFNs9B/AbjTVE5Fx9EOJJzUJvLCJSXqHwo15h5NFeUh95KxFhAMF+k46chlQiq7bFrZl1h/lycwPMtR9U3y/sCeHrEneWpNl+VPQt4XFAOzNYMzHgbeb888Y7rAwiGnWDXqUr+WAKqUm/XN9VyQKBgQCMScW0VudOf7m/dhzzmcE2wf0x+1Ad3eNBY2Loh7pXu3Fx6BZ08In/Lg/AQkElmoagwRCKgwlJ75yAGnX3c/o+R1bPbnMRGLcAVxFANQua7oGdev33PJbrIxa92oFDD56RUU1iaA1BQHanJfIfnV2RsBYNDWT9QsV8V3wu2iuk2QKBgQC0YUPdeYk3OkCS0HffMa+TJW4+7cIhFDsIZNBaBm3q9KXcqfE7hfhcMTAgLvgOYFwcq8IrbRpf+7E0Z8HSt3NJJJWLlYiXzeKkkGTAUXFSh7f52C0MPFLtMz+DWbdrKgmNFZwhizoy+cJmw0+YV9vF3KIxrLKhogCfTdJJzdbmWQ=="
	privKey, erro := parseRsaPrivateKey(base64Key)
	if erro != nil {
		t.Fatalf("解析私钥失败: %v", erro)
	}

	t.Logf("解析后的私钥: %v", privKey)

}

func Test_DebugSimpleSSO(t *testing.T) {
	// ⚠️ 注意：在实际测试环境中，您需要初始化所有的依赖（如 c *Client, iam 客户端等）

	base64Key := "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzUSZ4sCDhWBbZdnB6gySLNbNv6QcDERLUdoo1cchMW7GNdHhchbzcOR1F/Iz/k8mupWgT4Cn0FCoFQRNN8qfbN1r+yt6MPs0mSwO1hX7WrwRNecYmG5K0V3iRuyl7pkLeeEyq8az6Oj9C94Qka00luIMqKNJz9ak3ZKjjzIJJjzeK+V+2UoPmVP4xwxvNDEjFcIJz4YxOjt8gFpODVpOIV5k9bmlzJAPNoEW+ceQEBwG/kfbf8Msyq3P96WZ8HSO/n881S2tygtCPO6LQP/b2eQIWzrhXE+lcvAHNzxDTwhgap76LcvrPbd/ho3wtoqGIhp8OI9Ek9wWrcmfyTIwzwIDAQAB"
	pubKey, erro := parseRsaPublicKey(base64Key)
	if erro != nil {
		t.Fatalf("解析公钥失败: %v", erro)
	}

	t.Logf("解析后的公钥: %v", pubKey)

}

func Test_parseAesKey(t *testing.T) {
	var privateKey = "MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDcWWomvlNGyQhAiB0TcN3sP2VuhZ1xNRPxr58lHswC9Cbtdc2hiSbe/sxAvU1i0O8vaXwICdzRZ1JMg1TohG9zkqqjZDhyw1f1Ic6YR/OhE6NCpqERy97WMFeW6gJd1i5inHj/W19GAbqKLhSHGHqIjyo0wlBf58t+qFt9h/EFBVE/LAGQBsg/jHUQCxsLoVI2aSELGIw2oSDFoiljwLaQl0n9khX5ZbiegN3OkqodzCYHwWyu6aVVj8M1W9RIMiKmKr09s/gf31Nc3WjvjqhFo1rTuurWGgKAxJLL7zlJqAKjGWbIT4P6h/1Kwxjw6X23St3OmhsG6HIn+jl1++MrAgMBAAECggEBAMf820wop3pyUOwI3aLcaH7YFx5VZMzvqJdNlvpg1jbEE2Sn66b1zPLNfOIxLcBG8x8r9Ody1Bi2Vsqc0/5o3KKfdgHvnxAB3Z3dPh2WCDeklCOVClEVoLzziTuuTdGO5/CWJXdWHcVzIjPxmK34eJXioiLaTYqN3XKqKMdpD0ZGmtNTGvGf+9fQ4i94t0WqIxpMpGt7NM4RHy3+Onggev0zLiDANC23mWrTsUgect/762TYg8g1bKwLAb9wCBT+BiOuCc2wrArRLOJgUkj/F4/gtrR9ima34SvWUyoUaKA0bi4YBX9l8oJwFGHbU9uFGEMnH0T/V0KtIB7qetReywkCgYEA9cFyfBIQrYISV/OA+Z0bo3vh2aL0QgKrSXZ924cLt7itQAHNZ2ya+e3JRlTczi5mnWfjPWZ6eJB/8MlHGpn12o/POEkU+XjZZSPe1RWGt5g0S3lWqyx9toCS9ACXcN9tGbaqcFSVI73zVTRA8J9grR0fbGn7jaTlTX2tnlOTQ60CgYEA5YjYpEq4L8UUMFkuj+BsS3u0oEBnzuHdI9LEHmN+CMPosvabQu5wkJXLuqo2TxRnAznsA8R3pCLkdPGoWMCiWRAsCn979TdYQbqO2qvBAD2Q19GtY7lIu6C35/enQWzJUMQE3WW0OvjLzZ0l/9mA2FBRR+3F9A1drBdnmv0c3TcCgYEAi2i+ggVZcqPbtgrLOk5WVGo9F1GqUBvlgNn30WWNTx4zIaEkHSxtyaOLTxtq2odV7Kr3LGiKxwPpn/T+Ief+oIp92YcTn+VfJVGw4Z3BezqbR8lAUf/+HF5ZfpMrVXtZD4Igs3I33Duv4sCuqhEvLWTc44pHifVloozNxYfRfU0CgYBNHXa7a6cJ1Yp829l62QlJKtx6Ymj95oAnQu5Ez2ROiZMqXRO4nucOjGUP55Orac1aFiGm+mC/skFS0MWgW8evaHGDbWU180wheQ35hW6oKAb7myRHtr4q20ouEtQMdQIFsnV39G1iyqeeAsf7dxWElydXpRi2b68i3BIgzhzebQKBgQCdUQuTsqV9y/JFpu6Hc5TVvhG/ubfBspI5DhQqIGijnVBzFT//UfIYMSKJo75qqBEyP2EJSmCsunWsAFsMTszuiGTkrKcZy9G0wJqPztZZl2F2+bJgnA6nBEV7g5PA4Af+QSmaIhRwqGDAuROR47jndeyIaMTNETEmOnms+as17g=="
	var key = "BLbwTXL/3Fip0bGfYFFSWY3OAOW4HerIuQNe+Ql8ApwljncLKrAb3WbwF2vQDQv5r6FIy8HcsT95ZWeTeHrng9qQOMFQMzHAZSvtgfXZf9MrIZCeXrfGMIqhrgkR3dadWGrlT67a9koP2LiQ6W8eyop/4oFB5l/PnMnLlm9HYzTS0LhnvHM3xfUvNAKdZbd8nYLIthH0CxN7JFIudidL7qAHL6MRUzB72QAqmkslWQL/DT7ptZqrisJF9JbAdqscPBe6CkQpM/0r2Y7n7+C5KcYnQ6MKCm4H8riee8D21rRzyuAFG+dAnmO9X26OpBTL5oHEUdnk4sNhBwzK5s1yfQ=="
	// 通过私钥解密出aes key 和 iv
	aesKeyIv, err := RsaDecryptAesKeyIV(privateKey, key)
	if err != nil {
		t.Fatalf("RSA解密AES: %v", err)
	}
	t.Logf("解析后的AES Key和IV: %v", aesKeyIv)

}

func Test_VerifySignature(t *testing.T) {

	var data = "1MIMmBYeS33OlsDMhY0VkknjZuQ6zZ9PNzBCsbWmMn7f6AJY/ZykvneNoDw5mhVKYzw6SQ3FPCQ+LjHJjs0gOUX6H+Vn1p/ywIjVaXJlH0U="
	var signature = "Mc0LA+TrpBj9VT8B0OpPpPA+Qe//I/t+0dr8VkMRmaTjicJZEqS9TqMn/NUX4vI58ZPBHxWQtBQnmUQDJm/fwyjlyPtegNEMJ69GZopoOsuEBjND2wJKcFJNwPDrOCaqSfngQsxwJWeuy7a5I+ohJ8ENaSuhfZM+zfU+x63dy0eqZPOymoPllgP5qll0ae9s4wWkE7uu8XIK8HOmorU8MC8XG5l5UIdeopUXPEbnuXYYqcVBQ4Z2+Y/x4DJJBmqp+kCu8SPTiPDP+KZeFHnY0idupem6fqMkRDA/OFh6eZIHPHGZVBGuXsDcehSo6C37On3xV5L6gXqG+4WAiJ6GOg=="
	var publicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzUSZ4sCDhWBbZdnB6gySLNbNv6QcDERLUdoo1cchMW7GNdHhchbzcOR1F/Iz/k8mupWgT4Cn0FCoFQRNN8qfbN1r+yt6MPs0mSwO1hX7WrwRNecYmG5K0V3iRuyl7pkLeeEyq8az6Oj9C94Qka00luIMqKNJz9ak3ZKjjzIJJjzeK+V+2UoPmVP4xwxvNDEjFcIJz4YxOjt8gFpODVpOIV5k9bmlzJAPNoEW+ceQEBwG/kfbf8Msyq3P96WZ8HSO/n881S2tygtCPO6LQP/b2eQIWzrhXE+lcvAHNzxDTwhgap76LcvrPbd/ho3wtoqGIhp8OI9Ek9wWrcmfyTIwzwIDAQAB"
	var privateKey = "MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDcWWomvlNGyQhAiB0TcN3sP2VuhZ1xNRPxr58lHswC9Cbtdc2hiSbe/sxAvU1i0O8vaXwICdzRZ1JMg1TohG9zkqqjZDhyw1f1Ic6YR/OhE6NCpqERy97WMFeW6gJd1i5inHj/W19GAbqKLhSHGHqIjyo0wlBf58t+qFt9h/EFBVE/LAGQBsg/jHUQCxsLoVI2aSELGIw2oSDFoiljwLaQl0n9khX5ZbiegN3OkqodzCYHwWyu6aVVj8M1W9RIMiKmKr09s/gf31Nc3WjvjqhFo1rTuurWGgKAxJLL7zlJqAKjGWbIT4P6h/1Kwxjw6X23St3OmhsG6HIn+jl1++MrAgMBAAECggEBAMf820wop3pyUOwI3aLcaH7YFx5VZMzvqJdNlvpg1jbEE2Sn66b1zPLNfOIxLcBG8x8r9Ody1Bi2Vsqc0/5o3KKfdgHvnxAB3Z3dPh2WCDeklCOVClEVoLzziTuuTdGO5/CWJXdWHcVzIjPxmK34eJXioiLaTYqN3XKqKMdpD0ZGmtNTGvGf+9fQ4i94t0WqIxpMpGt7NM4RHy3+Onggev0zLiDANC23mWrTsUgect/762TYg8g1bKwLAb9wCBT+BiOuCc2wrArRLOJgUkj/F4/gtrR9ima34SvWUyoUaKA0bi4YBX9l8oJwFGHbU9uFGEMnH0T/V0KtIB7qetReywkCgYEA9cFyfBIQrYISV/OA+Z0bo3vh2aL0QgKrSXZ924cLt7itQAHNZ2ya+e3JRlTczi5mnWfjPWZ6eJB/8MlHGpn12o/POEkU+XjZZSPe1RWGt5g0S3lWqyx9toCS9ACXcN9tGbaqcFSVI73zVTRA8J9grR0fbGn7jaTlTX2tnlOTQ60CgYEA5YjYpEq4L8UUMFkuj+BsS3u0oEBnzuHdI9LEHmN+CMPosvabQu5wkJXLuqo2TxRnAznsA8R3pCLkdPGoWMCiWRAsCn979TdYQbqO2qvBAD2Q19GtY7lIu6C35/enQWzJUMQE3WW0OvjLzZ0l/9mA2FBRR+3F9A1drBdnmv0c3TcCgYEAi2i+ggVZcqPbtgrLOk5WVGo9F1GqUBvlgNn30WWNTx4zIaEkHSxtyaOLTxtq2odV7Kr3LGiKxwPpn/T+Ief+oIp92YcTn+VfJVGw4Z3BezqbR8lAUf/+HF5ZfpMrVXtZD4Igs3I33Duv4sCuqhEvLWTc44pHifVloozNxYfRfU0CgYBNHXa7a6cJ1Yp829l62QlJKtx6Ymj95oAnQu5Ez2ROiZMqXRO4nucOjGUP55Orac1aFiGm+mC/skFS0MWgW8evaHGDbWU180wheQ35hW6oKAb7myRHtr4q20ouEtQMdQIFsnV39G1iyqeeAsf7dxWElydXpRi2b68i3BIgzhzebQKBgQCdUQuTsqV9y/JFpu6Hc5TVvhG/ubfBspI5DhQqIGijnVBzFT//UfIYMSKJo75qqBEyP2EJSmCsunWsAFsMTszuiGTkrKcZy9G0wJqPztZZl2F2+bJgnA6nBEV7g5PA4Af+QSmaIhRwqGDAuROR47jndeyIaMTNETEmOnms+as17g=="
	var key = "BLbwTXL/3Fip0bGfYFFSWY3OAOW4HerIuQNe+Ql8ApwljncLKrAb3WbwF2vQDQv5r6FIy8HcsT95ZWeTeHrng9qQOMFQMzHAZSvtgfXZf9MrIZCeXrfGMIqhrgkR3dadWGrlT67a9koP2LiQ6W8eyop/4oFB5l/PnMnLlm9HYzTS0LhnvHM3xfUvNAKdZbd8nYLIthH0CxN7JFIudidL7qAHL6MRUzB72QAqmkslWQL/DT7ptZqrisJF9JbAdqscPBe6CkQpM/0r2Y7n7+C5KcYnQ6MKCm4H8riee8D21rRzyuAFG+dAnmO9X26OpBTL5oHEUdnk4sNhBwzK5s1yfQ=="

	aesKeyIv, err := RsaDecryptAesKeyIV(privateKey, key)
	if err != nil {
		t.Fatalf("RSA解密AES: %v", err)
	}

	userJson, err := AesDecrypt(data, aesKeyIv)
	if err != nil {
		t.Fatalf("AES解密Payload失败: %v", err)
	}

	t.Logf("解析到payload: %v", userJson)

	valid, err := VerifySignature(userJson, signature, publicKey)
	if err != nil {
		t.Fatalf("验证签名失败: %v", err)
	}
	if !valid {
		t.Fatalf("签名无效: %v", err)
	}
	t.Log("签名有效")
}
